#include <iostream>

//구조체가 크기를 할당하는 방식
//1.구조체가 갖고있는 기본변수인 멤버변수 중에서 가장 크기가 큰 변수의 크기(기준크기)로 일단 할당 ex)int면 4byte
//2.그 공간에 하나씩 변수를 할당하면서 크기가 부족하면 기준크기 만큼 또 공간 확보
//3.채우고 난뒤 빈 공간은 padding바이트(구조체가 크기를 잡을 때 중간중간 비는 공간이 발생)로 채움
typedef struct tagTest
{
	short nTest;
	char ch;
	int iTest;
	short nTest1;
	//구조체가 들어올 경우 위에서 계산한 크기 + 구조체 크기로 계산
	//TEST2 a;

	//만약 자신을 갖는 경우, 크기를 재야하는데 자신이 나와버리면 다시 재러 들어가고 무한루프..
	//TEST a;
	//자신을 갖고 싶으면 포인터로 선언해서 사용
	tagTest* test;
}TEST;

//공용체(멤버변수들이 같은 메모리 공간을 공유함) - 지금 MyUnion의 크기는 4byte(메모리공간 공유하기 때문에)
//멤버변수의 자료형 크기가 다를경우 크기가 더 큰 멤버변수의 크기로 메모리 공간을 잡음
union MyUnion
{
	int iTest;
	int iTest2;
};

void main()
{
	std::cout << sizeof(TEST) << std::endl;

	//=================================
	//공용체
	MyUnion Test = { 10 };
}

//과제1. 3명분의 이름과 성적을 보관(배열 버전, 구조체 버전)
//1. 입력 
//2.전체출력
//3.검색출력

//과제2. 로또 번호(5개)를 만들어내는 프로그램 만들기(배열을 사용해서)